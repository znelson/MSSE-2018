
MODULE main
	VAR
		-- input variables
		
		-- input variables representing pedestrian walk requests in two directions
		inNSWalkRequest : boolean;
		inWEWalkRequest : boolean;

		-- input variables representing emergency vehicle presence in two directions
		inNSEmergency : boolean;
		inWEEmergency : boolean;

		-- input variables representing cars waiting in two directions
		inNSCarsWaiting : boolean;
		inWECarsWaiting : boolean;

		-- output variables

		-- output variables representing the color of the traffic lights in two directions
		outNSCarLight : {Green, Yellow, Red};
		outWECarLight : {Green, Yellow, Red};

		-- output variables representing the state of the pedestrian walk lights in two directions
		outNSWalkLight : {Walk, Stop};
		outWEWalkLight : {Walk, Stop};

		-- state variables

		trafficMode : {NSGo, NSSlow, NSStop, WEGo, WESlow, WEStop, ResetTrafficMode};

	DEFINE
		emergency := inNSEmergency | inWEEmergency;
		
		redEverywhere := outNSCarLight = Red & outWECarLight = Red;
		
		yellowAnywhere := trafficMode in {NSSlow, WESlow};
		
		greenAnywhere := trafficMode in {NSGo, WEGo};

		waitingWE := inWEWalkRequest | inWECarsWaiting;

		waitingNS := inNSWalkRequest | inNSCarsWaiting;

	ASSIGN


		init(trafficMode) := ResetTrafficMode;
		next(trafficMode) :=
			case
				trafficMode=ResetTrafficMode & !emergency		: NSGo;

				trafficMode=NSGo & (waitingWE | emergency)		: NSSlow;

				trafficMode=NSSlow								: NSStop;

				trafficMode=NSStop & !emergency : WEGo;
				trafficMode=WEGo & (waitingNS | emergency)		: WESlow;

				trafficMode=WESlow								: WEStop;

				trafficMode=WEStop & !emergency					: NSGo;

				TRUE											: trafficMode;
			esac;

		init(outNSCarLight) := Red;
		next(outNSCarLight) := 
			case
				next(trafficMode)=NSGo							: Green;
				next(trafficMode)=NSSlow						: Yellow;
				TRUE											: Red;
			esac;

		init(outWECarLight) := Red;
		next(outWECarLight) := 
			case
				next(trafficMode)=WEGo							: Green;
				next(trafficMode)=WESlow						: Yellow;
				TRUE											: Red;
			esac;

		init(outNSWalkLight) := Stop;
		next(outNSWalkLight) := 
			case
				next(trafficMode)=NSGo							: Walk;
				TRUE											: Stop;
			esac;

		init(outWEWalkLight) := Stop;
		next(outWEWalkLight) := 
			case
				next(trafficMode)=WEGo							: Walk;
				TRUE											: Stop;
			esac;

	
	-- Justice statement to prevent infinite emergencies either direction.
	JUSTICE !emergency;

	-- Justice statement to prevent infinite cars or pedestrians waiting in either direction.
	JUSTICE !waitingWE;
	JUSTICE waitingWE;
	JUSTICE !waitingNS;
	JUSTICE waitingNS;


	-- Liveness properties:
	-----------------------

	-- If cars are waiting, they will eventually get to go (or stop waiting)
	CTLSPEC AG(inNSCarsWaiting -> AF(outNSCarLight = Green | !inNSCarsWaiting))
	CTLSPEC AG(inWECarsWaiting -> AF(outWECarLight = Green | !inWECarsWaiting))

	-- If pedestrians are waiting, they will eventually get to walk (or stop waiting)
	CTLSPEC AG(inNSWalkRequest -> AF(outNSWalkLight = Walk | !inNSWalkRequest))
	CTLSPEC AG(inNSWalkRequest -> AF(outWEWalkLight = Walk | !inNSWalkRequest))

	
	-- Safety properties:
	---------------------

	-- One of the two directions always show a Red light
	CTLSPEC AG(outNSCarLight = Red | outWECarLight = Red)
	CTLSPEC AG(outNSWalkLight = Stop | outWEWalkLight = Stop)

	-- When pedestrians have a Walk light, the opposite direction car light is Red
	CTLSPEC AG(outNSWalkLight = Walk -> outWECarLight = Red)
	CTLSPEC AG(outWEWalkLight = Walk -> outNSCarLight = Red)

	-- Immediately after a Yellow light, all lights turn Red
	CTLSPEC AG(outNSCarLight = Yellow -> AX redEverywhere)
	CTLSPEC AG(outWECarLight = Yellow -> AX redEverywhere)

	
	-- Emergency vehicles:
	----------------------

	-- If an emergency vehicle arrives and a light is Green, all lights will turn Red in exactly 2 steps
	CTLSPEC AG((emergency & greenAnywhere) -> AX(AX(redEverywhere)))
	-- If an emergency vehicle arrives and a light is Yellow, all lights will turn Red in exactly 1 step
	CTLSPEC AG((emergency & yellowAnywhere) -> AX(redEverywhere))
	-- If an emergency vehicle arrives and all lights are Red, all lights will remain Red in the next step
	CTLSPEC AG((emergency & redEverywhere) -> AX(redEverywhere))

	-- If there are no emergency vehicles, and no cars or pedestrians waiting, lights will remain Green.
	CTLSPEC AG(!emergency & outNSCarLight = Green & !waitingWE -> AX(outNSCarLight = Green))
	CTLSPEC AG(!emergency & outWECarLight = Green & !waitingNS -> AX(outWECarLight = Green))

	-- Each light will go to Yellow between Green and Red
	LTLSPEC G(Y(outNSCarLight = Green) & X(outNSCarLight = Red) -> outNSCarLight = Yellow)
	LTLSPEC G(Y(outWECarLight = Green) & X(outWECarLight = Red) -> outWECarLight = Yellow)


	-- Anti-properties:
	-------------------

	-- The lights can fail to cycle (eventually) from Green North-South -> Green West-East -> Green North-South
	-- ("The lights are stuck!")
	CTLSPEC !EF(outWECarLight = Green & EF(outNSCarLight = Green & EF(outWECarLight = Green)))

	-- specification !(EF (outWECarLight = Green & EF (outNSCarLight = Green & EF outWECarLight = Green)))  is false
	-- as demonstrated by the following execution sequence
				-- Trace Description: CTL Counterexample 
				-- Trace Type: Counterexample 
				-- -> State: 1.1 <-
				--   inNSWalkRequest = FALSE
				--   inWEWalkRequest = FALSE
				--   inNSEmergency = FALSE
				--   inWEEmergency = FALSE
				--   inNSCarsWaiting = FALSE
				--   inWECarsWaiting = FALSE
				--   outNSCarLight = Red
				--   outWECarLight = Red
				--   outNSWalkLight = Stop
				--   outWEWalkLight = Stop
				--   trafficMode = ResetTrafficMode
				--   waitingNS = FALSE
				--   waitingWE = FALSE
				--   greenAnywhere = FALSE
				--   yellowAnywhere = FALSE
				--   redEverywhere = TRUE
				--   emergency = FALSE
				-- -> State: 1.2 <-
				--   inWEWalkRequest = TRUE
				--   outNSCarLight = Green
				--   outNSWalkLight = Walk
				--   trafficMode = NSGo
				--   waitingWE = TRUE
				--   greenAnywhere = TRUE
				--   redEverywhere = FALSE
				-- -> State: 1.3 <-
				--   inWEWalkRequest = FALSE
				--   outNSCarLight = Yellow
				--   outNSWalkLight = Stop
				--   trafficMode = NSSlow
				--   waitingWE = FALSE
				--   greenAnywhere = FALSE
				--   yellowAnywhere = TRUE
				-- -> State: 1.4 <-
				--   outNSCarLight = Red
				--   trafficMode = NSStop
				--   yellowAnywhere = FALSE
				--   redEverywhere = TRUE
				-- -- Loop starts here
				-- -> State: 1.5 <-
				--   outWECarLight = Green
				--   outWEWalkLight = Walk
				--   trafficMode = WEGo
				--   greenAnywhere = TRUE
				--   redEverywhere = FALSE
				-- -> State: 1.6 <-
				--   inNSWalkRequest = TRUE
				--   waitingNS = TRUE
				-- -> State: 1.7 <-
				--   inNSWalkRequest = FALSE
				--   outWECarLight = Yellow
				--   outWEWalkLight = Stop
				--   trafficMode = WESlow
				--   waitingNS = FALSE
				--   greenAnywhere = FALSE
				--   yellowAnywhere = TRUE
				-- -> State: 1.8 <-
				--   outWECarLight = Red
				--   trafficMode = WEStop
				--   yellowAnywhere = FALSE
				--   redEverywhere = TRUE
				-- -> State: 1.9 <-
				--   outNSCarLight = Green
				--   outNSWalkLight = Walk
				--   trafficMode = NSGo
				--   greenAnywhere = TRUE
				--   redEverywhere = FALSE
				-- -> State: 1.10 <-
				--   inWEWalkRequest = TRUE
				--   waitingWE = TRUE
				-- -> State: 1.11 <-
				--   inWEWalkRequest = FALSE
				--   outNSCarLight = Yellow
				--   outNSWalkLight = Stop
				--   trafficMode = NSSlow
				--   waitingWE = FALSE
				--   greenAnywhere = FALSE
				--   yellowAnywhere = TRUE
				-- -> State: 1.12 <-
				--   outNSCarLight = Red
				--   trafficMode = NSStop
				--   yellowAnywhere = FALSE
				--   redEverywhere = TRUE
				-- -> State: 1.13 <-
				--   outWECarLight = Green
				--   outWEWalkLight = Walk
				--   trafficMode = WEGo
				--   greenAnywhere = TRUE
				--   redEverywhere = FALSE

	-- If you are sitting at a Red light, you are guaranteed a Green light within 4 steps
	CTLSPEC AG(outWECarLight = Red -> AX(outWECarLight = Green | AX(outWECarLight = Green | AX(outWECarLight = Green | AX(outWECarLight = Green)))))

	-- specification AG (outWECarLight = Red -> AX (outWECarLight = Green | AX (outWECarLight = Green | AX (outWECarLight = Green | AX outWECarLight = Green))))  is false
	-- as demonstrated by the following execution sequence
				-- Trace Description: CTL Counterexample 
				-- Trace Type: Counterexample 
				-- -> State: 2.1 <-
				--   inNSWalkRequest = FALSE
				--   inWEWalkRequest = FALSE
				--   inNSEmergency = FALSE
				--   inWEEmergency = FALSE
				--   inNSCarsWaiting = FALSE
				--   inWECarsWaiting = FALSE
				--   outNSCarLight = Red
				--   outWECarLight = Red
				--   outNSWalkLight = Stop
				--   outWEWalkLight = Stop
				--   trafficMode = ResetTrafficMode
				--   waitingNS = FALSE
				--   waitingWE = FALSE
				--   greenAnywhere = FALSE
				--   yellowAnywhere = FALSE
				--   redEverywhere = TRUE
				--   emergency = FALSE
				-- -- Loop starts here
				-- -> State: 2.2 <-
				--   outNSCarLight = Green
				--   outNSWalkLight = Walk
				--   trafficMode = NSGo
				--   greenAnywhere = TRUE
				--   redEverywhere = FALSE
				-- -- Loop starts here
				-- -> State: 2.3 <-
				-- -- Loop starts here
				-- -> State: 2.4 <-
				-- -> State: 2.5 <-


	-- Walk lights can be on in both directions
	-- ("This intersection eventually lets everybody walk at once!")
	CTLSPEC EF(outWEWalkLight = Walk & outNSWalkLight = Walk)

	-- specification EF (outWEWalkLight = Walk & outNSWalkLight = Walk)  is false
	-- as demonstrated by the following execution sequence
				-- Trace Description: CTL Counterexample 
				-- Trace Type: Counterexample 
				-- -> State: 3.1 <-
				--   inNSWalkRequest = FALSE
				--   inWEWalkRequest = FALSE
				--   inNSEmergency = FALSE
				--   inWEEmergency = FALSE
				--   inNSCarsWaiting = FALSE
				--   inWECarsWaiting = FALSE
				--   outNSCarLight = Red
				--   outWECarLight = Red
				--   outNSWalkLight = Stop
				--   outWEWalkLight = Stop
				--   trafficMode = ResetTrafficMode
				--   waitingNS = FALSE
				--   waitingWE = FALSE
				--   greenAnywhere = FALSE
				--   yellowAnywhere = FALSE
				--   redEverywhere = TRUE
				--   emergency = FALSE

